<?xml version="1.0" encoding="utf-8"?>
<!-- name="GENERATOR" content="github.com/mmarkdown/mmark Mmark Markdown Processor - mmark.miek.nl" -->
<rfc version="3" ipr="trust200902" docName="draft-muffett-same-origin-onion-certificates-00" submissionType="IETF" category="info" xml:lang="en" xmlns:xi="http://www.w3.org/2001/XInclude" consensus="true">

<front>
<title abbrev="sooc">Same Origin Onion Certificates</title><seriesInfo value="draft-muffett-same-origin-onion-certificates-00" stream="IETF" status="informational" name="Internet-Draft"></seriesInfo>
<author initials="A." surname="Muffett" fullname="Alec Muffett"><organization>Independent</organization><address><postal><street></street>
</postal><email>alec.muffett@gmail.com</email>
</address></author>
<date/>
<area>Internet</area>
<workgroup>Transport Layer Security</workgroup>
<keyword>tor</keyword>
<keyword>onion</keyword>
<keyword>tls</keyword>
<keyword>ssl</keyword>

<abstract>
<t>Onion networking <xref target="RFC7686"></xref> offers technical features which obviate
many of the risks upon which led to the development of our modern
Certificate Authority Public Key Infrastructure; as an increasingly
popular technology for networking with strong trust requirements,
onion networking would benefit from easier access to TLS certificates
for HTTPS use.</t>
<t>At the moment only EV certificates are available for onion network
addresses, although DV certificates are under discussion; the
potential downsides of issuing DV certificates for Onion Addresses are
discussed below.</t>
<t>This document defines a third possible mechanism - SOOC: Same Origin
Onion Certificates - that would enable real-time, client-side
validation of per-onion-address TLS certificates, fully equivalent (in
defined circumstances) to validation of a certificate trust chain, but
involving none of third parties, trust chains, or financial cost.</t>
<t>In the simpest possible terms, SOOC is <em>not</em> a &quot;self-signed
certificate&quot; proposal; instead it is a proposal that &quot;in very limited
circumstances, we shall not care about signatures at all&quot;, with a
codicil regarding how this may be improved in future.</t>
<t>This distinction is important because it highlights that the initial
implementation of SOOC certificates contain no additional features
above or beyond the specifications of standard DV certificates, and
require no tools to create other than standard <tt>openssl</tt> or <tt>mkcert</tt>
to create.  This is part of the value proposition of SOOC, in order to
lower the barriers to adoption by small sites and experimenters with
limited experience of TLS.</t>
</abstract>

</front>

<middle>

<section anchor="sooc-certificate-specification"><name>SOOC Certificate Specification</name>
<t>Using the Public Suffix List, let <tt>baseDomain</tt> be the Registrable
Domain of the connected origin, e.g., <tt>abcdefghijklmnop.onion</tt></t>

<ol>
<li><t>A SOOC Certificate is a properly formatted DV or EV TLS
certificate, per the browser's concept of web standards</t>
</li>
<li><t>where the certificate, if the browser were to trust the
certificate's trust chain, would otherwise be a fully valid and
trusted certificate</t>
</li>
<li><t>where the certificate, if it has a basicConstraints extension, that
extension <bcp14>MUST</bcp14> only be CA:FALSE</t>
</li>
<li><t>where the certificate, if it has a commonName, that commonName
<bcp14>MUST</bcp14> be equal to the baseDomain as defined above</t>
</li>
<li><t>where the certificate, if it has subjectAlternativeNames, those
subjectAlternativeNames <bcp14>MUST</bcp14> all be of type dNSname, <bcp14>MUST</bcp14>
all be of valid DV format (wildcards permitted) and each of which
<bcp14>MUST</bcp14> have the baseDomain as the rightmost two labels.</t>
</li>
<li><t>where the certificate, if it cites any subjectAlternativeNames or
other regisitrable domains, all of those subjectAlternativeNames or
other registrable domains <bcp14>MUST</bcp14> have the baseDomain as the
rightmost two labels.</t>
</li>
</ol>
<t>If all of these contstraints are satisfied, the certificate is a valid
SOOC certificate.</t>
</section>

<section anchor="sooc-example-protocol"><name>SOOC Example Protocol</name>
<t>If you are a Browser, and...</t>

<ol>
<li><t>You connect to <tt>site.geo.subdomain.foo.onion</tt> to <tt>GET</tt> a URL via
HTTPS in the normal way</t>
</li>
<li><t>and you observe that the rightmost label of the TLD is .onion</t>
</li>
<li><t>and that <tt>site.geo.subdomain.foo.onion</tt> offers you a certificate</t>

<ol>
<li><t>then you <bcp14>MUST</bcp14> confirm that you have an opt-in setting enabled
(probably default in TorBrowser)</t>
</li>
<li><t>and you <bcp14>MUST</bcp14> confirm that the certificate satisfies ALL of the
conditions of being a valid SOOC certificate with the baseDomain
of <tt>foo.onion</tt></t>
</li>
<li><t>and you <bcp14>MUST</bcp14> confirm that the baseDomain for the certificate,
matches the rightmost two labels of the URL site</t>
</li>
<li><t>and you <bcp14>MUST</bcp14> confirm that the certificate's
subjectAlternativeNames would successfully match
<tt>site.geo.subdomain.foo.onion</tt></t>
</li>
</ol></li>
<li><t>If all of the above are confirmed, then your certificate validation
code <bcp14>MUST</bcp14> skip checking the certificiate trust chain.</t>
</li>
</ol>
</section>

<section anchor="why-sooc-is-necessary"><name>Why SOOC is Necessary</name>
<t>There are many reasons why the Internet and WWW are equipped with a
public key infrastructure (PKI), and the PKI offers many features and
benefits; however its inarguable primary function is to provide a form
of identity assurance, that when a person types a hostname such as
&quot;www.example.com&quot; into a web browser's URL bar, they should have some
reasonable expectation - and ideally a strong guarantee - that the
network-connected-service from which they are eventually served
content is one that would commonly be accepted as being capable,
permitted and expected to serve content which people who own the
&quot;www.example.com&quot; intentionally supply.</t>
<t>The PKI mechanism has evolved to provide such identity assurance in a
heavily-layered network environment which lacks overarching trust
mechanisms and which is riven with potential for attack at (or:
across) different layers.</t>
<t>For instance:</t>

<ul>
<li><t>ARP: first-hop, last-hop, or indeed any other hop may be hijacked
with spoofed layer-2 address resolution; indeed some firewall
devices rely upon this mechanism for their function</t>
</li>
<li><t>TCP: traffic may be blocked, dropped, modified, injected, or
redirected to fake machines</t>
</li>
<li><t>BGP: bearer traffic and entire flows may be blocked, dropped, or
redirected to fake machines</t>
</li>
<li><t>DNS: namespaces can be domain-jacked, responses can be forged,
cache-poisoned, or simply tampered-with in flight, also homoglyph
&quot;lookalike&quot; domains (eg: www.examp1e.com) are also possible</t>
</li>
</ul>
<t>The benefits of any intra-layer trust mechanism - eg: IPsec
Authentication Header (AH) &amp; Encapsulating Security Payload (ESP) at
layer-3 - are typically isolated and not known to other layers of the
stack - eg: the web browser - which therefore cannot take
consideration of their benefits.</t>
<t>In this environment our HTTPS ecosystem has evolved in the expectation
of ignoring transport security - such as IPsec - and has instead has
built its own, where a server's &quot;identity&quot; may be provisionally
bootstrapped by DNS resolution of of a layer-3 IP address, however
that identity <bcp14>MUST</bcp14> be proven by proof-of-possession of a
cryptographic key that has been blessed by a trusted authority as
pertaining to &quot;www.example.com&quot;.</t>
<t>The extent of such blessing is variable: for DV certificates the
requisite test is one of consistent DNS resolution (eg: LetsEncrypt);
and for EV certificates there are additional, expensive, and arguably
superfluous corporate identity checks.</t>

<section anchor="onion-networking-compared-to-tls-pki"><name>Onion Networking compared to TLS PKI</name>
<t>Tor &quot;onion networking&quot; is an alternate, software-defined, flat layer-3
network space which exists on top of TCP/IP and the rest of the
internet.</t>
<t>Onion addresses are either hashes of (in 80-bit version 2 addresses),
or are literally and entirely (in 256-bit version 3 addresses) the
public keys which sign all data that pertains to communication with
that address.</t>
<t>Like most cryptographic keys, onion addresses appear essentially to be
strings of random bits, although it's possible via &quot;mining&quot; to
eventually generate one which appears meaningful to human beings, eg:
&quot;facebookcorewwwi.onion&quot;</t>
<t>For purposes of PKI, the most interesting aspect of onion addresses is
their textual representation; unlike IPv4's &quot;dotted quads&quot; or IPv6's
colon-separated hexadecimal, onion addresses are required (<xref target="RFC7686"></xref>
section 1) to be written in a DNS-compatible text format: as base-32
encoded binary with addition of the IANA Special-Use Domain Name
suffix, &quot;.onion&quot;, and they are interpreted ignoring any labels other
than the rightmost two.</t>
<t>Thus: the onion address &quot;www.exampleonionaddr.onion&quot; would be a
version 2 onion address representing a server that possesses a
1024-bit RSA public key which has an 80-bit-truncated SHA-1 hash of
0x25c0c7ac8e6a1cd00c71 (<xref target="RFC3548"></xref> base32 &quot;EXAMPLEONIONADDR&quot;); and
where the &quot;www&quot; prefix hostname/subdomain will ignored, although if
specified it will be passed onward in an HTTPS &quot;Host:&quot; header.</t>
<t>This representation pierces all of the layers of the network stack,
and in one encoding it addresses most of the problems which the TLS
PKI stack has gradually evolved to solve for TCP/IP:</t>

<ul>
<li><t>There is no DNS name resolution service in onion networking, and in
fact <xref target="RFC7686"></xref> section 2 specifies that there <bcp14>MUST NOT</bcp14> be
overlap with DNS; this is an important point to which we will return
later.</t>
</li>
<li><t>What the user types into the browser bar will defacto prove what
site they are connected to; the Tor Onion Network at layer 3 will
consequently assert &quot;proof-of-possession of a cryptographic key&quot;
that will correspond absolutely to the remote service; this is
isomorphic to the model of a TLS certificate proving the identity of
a webserver.</t>
</li>
<li><t>Because onion addresses are layer-3 addresses, there is no concept
of &quot;subdomains&quot; nor of &quot;hostnames&quot; and therefore any such
information is considered &quot;advisory&quot;; however in this format they
are backwards compatible in a way that &quot;subdomains&quot; for &quot;dotted
quad&quot; addresses would not be, eg: &quot;www.192.168.1.1&quot;</t>
</li>
<li><t>All other connectivity redirections or &quot;hijacks&quot; are inhibited by
the Tor network stack.</t>
</li>
</ul>
</section>
</section>

<section anchor="sooc-in-context"><name>SOOC In Context</name>
<t>As described above, the security characteristics and protections of
layer-3 networking (eg: IPsec) are generally not visible to HTTPS
applications at layer-7, and therefore cannot be relied upon.</t>
<t>However: the encoding of onion addresses explicitly solves this problem:</t>

<ul>
<li><t>The connection <strong>must</strong> be an onion connection, because it was made
using Tor-capable software, and because the &quot;.onion&quot; Special Use
Domain Name is reserved for that purpose.</t>
</li>
<li><t>The connection <strong>must</strong> be to &quot;exampleonionaddr.onion&quot; because the
Tor network will not permit otherwise.</t>
</li>
<li><t>Any subdomain or hostname is subordinate to the fact that the
connection is made to &quot;exampleonionaddr.onion&quot;, because (as a
layer-3 address) there are actually no such things as &quot;subdomains&quot;
or &quot;hostnames&quot;, and thus this information is purely advisory, or for
compatability.</t>
</li>
</ul>
<t>Therefore it is possible for a client to assure itself - when
presented with a TLS certificate for &quot;www.exampleonionaddr.onion&quot; - to
assure itself that it is genuinely and authoritatively connected to
&quot;exampleonionaddr.onion&quot; by simply performing a string comparison with
the hostname to which is it connected - without any reference to a
certificate authority trust chain nor any other third party resource.</t>
<t>This observation is the basis of &quot;Same Origin Onion Certificate&quot;
checking; that onion sites may offer (eg: homebrew DV-compliant) TLS
certificates which correspond solely and uniquely to themselves, and
under those limited circumstances the client may skip the certificate
chain checks that might otherwise be required to validate identity.</t>
</section>

<section anchor="sooc-edge-cases-and-sooc-ev"><name>SOOC Edge-Cases, and &quot;SOOC-EV&quot;</name>
<t>It is necessary to recognise that there is one &quot;weak&quot; spot in the
assertion that string comparison is sufficient to prove the binding
between an Onion Address and a SSL Certificate SubjectAlternativeName, and
that is in a scenario where the content webserver has been been
deployed on one (or more) machines which are separate from the machine
that terminates (i.e.: &quot;hosts&quot;) the Onion Address AND, where the Tor
daemon makes a direct TCP-level connection onwards to those servers.</t>
<t>Those unfamiliar with how Tor works, may analogise this as
&quot;port-forwarding over SSH, where a port on the local host is forwarded
to the remote server, which then forwards the data further onwards
over a fresh TCP connection to a given port on a separate, third-party
machine.&quot;</t>
<t>The threat is: if a malicious actor can present themselves to the
server-side Tor daemon as the IP address of the &quot;third party&quot;
webserver - for instance a load-balancer, or a member of a
load-balanced server tier - then under SOOC the malicious actor who
achieves this could create a certificate permitthing them to
impersonate a genuine SSL-certificate-enabled system <em>for</em> that onion
address.</t>
<t>This is a question of trust boundaries and real world deployments; at
the moment the &quot;onion networking&quot; service space is broadly comprised
of unencrypted HTTP, and as such any typical onion service deployment
which uses a load-balancer would already be at risk of this attack.
As such, currently lacking TLS-layer security, almost nobody typically
deploys their onion server backend in a manner which could fall victim
to this.  Most onion HTTP services are typically served over loopback.</t>
<t>Equally: any onion site which uses a &quot;rewriter&quot; reverse-proxy (e.g.:
New York Times, BBC, Deutsche Welle, Propublica, Internet Archive) is
also typically NOT at risk from this attack, because the inbound HTTPS
request is terminated on the &quot;onion&quot; host, immediately rewritten in
terms of the address of the upstream service, and is passed over
loopback onward as a fresh HTTPS reverse-proxy connection.</t>
<t>As far as the author is aware, the only onion service deployment where
the above threat scenario would be a potential issue, is at Facebook;
and if the Facebook devops team are at risk of someone interposing a
fake server and server certificate into their infrastructure, then
they have far bigger problems than mere onion service impersonation.</t>

<section anchor="advanced-mitigations-sooc-ev"><name>Advanced Mitigations: SOOC-EV</name>
<t>Generally at this point, enthusiastic cryptographers will point at
Version 3 Onion Addresses and note that they are actual public keys,
and &quot;couldn't they just sign the SOOC Certificate, and the browser
would check the signature, and that would be the end of the problem?&quot;</t>
<t>They are correct to say this, however this raises two problems:</t>

<ol>
<li><t>This would orphan Version 2 Onion addresses without SOOC, expressly
against the intent of this document.</t>
</li>
<li><t>The Version 3 Onion addresses are (by Tor policy) never used to
sign anything <eref target="https://gitweb.torproject.org/torspec.git/tree/rend-spec-v3.txt#n557">https://gitweb.torproject.org/torspec.git/tree/rend-spec-v3.txt#n557</eref></t>
</li>
</ol>
<t>Quote:</t>
<blockquote><t>Master (hidden service) identity key -- A master signing keypair
used as the identity for a hidden service. This key is long term and
not used on its own to sign anything; it is only used to generate
blinded signing keys as described in [KEYBLIND]</t>
</blockquote><t>In Version 3 Onion Addressing, the address-key is used to derive
short-term, time-locked, &quot;blinded&quot; keys in a fixed manner that can be
replicated by a client which wishes to connect to the master onion
address.  The blinded keys are used to sign connection information
that is loaded up into the &quot;HSDir&quot; distributed hash-table that
describes Onion connectivity.</t>
<t>Ergo: to implement a form of &quot;Extended Validation&quot; certificate
extension that would bind a TLS certificate to an onion address, the
certificate would have to contain the onion public key (for V2) or a
blinded public key for a reasonable timestamp (for V3), and this
public key would be used to validate a hash of some portion of the
certificate, all in order to address this niche deployment risk.</t>
<t>This is certainly possible to achieve, and is fairly straightforward,
however it is a tremendous hassle for a niche risk, and I believe that
it should not be an progress to implmenting SOOC without implementing
these &quot;Extended Validation&quot;-type checks.</t>
<t>My rationale for deferring SOOC-EV - apart from the nicheness aspect -
is also bolstered by the observation that &quot;Appendix F&quot; of CA/B-Forum
Ballot 144:</t>
<t><eref target="https://cabforum.org/2015/02/18/ballot-144-validation-rules-dot-onion-names/">https://cabforum.org/2015/02/18/ballot-144-validation-rules-dot-onion-names/</eref></t>
<t>This describes the &quot;CAB Forum Tor Service Descriptor Hash Extension&quot;,
a hash of the V2 Onion Public Key which Certificate Authorities are
obliged to bind into the EV TLS Onion Certificates that they issue,
ostensibly to both link the onion public key more tightly to the TLS
certificate in the event that a colliding V2 Onion address is
generated, but also to protect against the above described kinds of
attack.</t>
<t>There exists absolutely no client code actually implemented to check
for, nor validate, this descriptor, to the extent that when Digicert
misissued a certificate without the extension (compare
<eref target="https://crt.sh/?id=240277340">https://crt.sh/?id=240277340</eref> with <eref target="https://crt.sh/?id=241547157)">https://crt.sh/?id=241547157)</eref>,
no-one actually noticed, except for Digicert.</t>
<t>As such, I don't believe that this attack is currently worthy of
consideration, especially as it is within the power of the service
provider to mitigate in alternative ways, and in any case we may still
evolve towards SOOC-EV as the the technology matures.</t>
<t>To be clear: I do believe that SOOC-EV should probably be done.  But I
do not believe that it should be a pre-requisite condition for SOOC,
nor is it necessary to do it &quot;now&quot;, nor is any threat great enough to
block SOOC until SOOC-EV is defined. Apart from the reasons stated
above, there is likely still some need for V3 Onion Address blinding
and key-derivation algorithms to mature and prove stability in
deployments for a few years.</t>
</section>

<section anchor="reciprocal-attack-shared-tor-gateways"><name>Reciprocal Attack: Shared Tor Gateways?</name>
<t>Having comprehended the above, there is also obviously a reciprocal
risk which can be stated:</t>

<ul>
<li><t>What about shared onion gateways? What if many people use one Tor
proxy to access Tor? One could interpose a fake SOCKS5
man-in-the-middle and respond to Onion connection requests with a
fake SOOC TLS certificate!</t>
</li>
</ul>
<t>The response to which, again, is that although such may happen
experimentally, the overwhelming means by which people access Tor is
by using a local client over loopback, one (or more) per user. At the
&quot;client&quot; end, access to the Tor proxy is within the local trust
boundary, where worse things can happen.</t>
</section>
</section>

<section anchor="linkfarm-tbd"><name>Linkfarm TBD</name>
<t>For more on Onion Networking as a layer-3 network, see:
<eref target="https://www.youtube.com/watch?v=pebRZyg_bh8">https://www.youtube.com/watch?v=pebRZyg_bh8</eref></t>
<t>IANA Special-Use Domain Names
<eref target="https://www.iana.org/assignments/special-use-domain-names/special-use-domain-names.xhtml">https://www.iana.org/assignments/special-use-domain-names/special-use-domain-names.xhtml</eref></t>
<t>Facebook Onion Announcement
<eref target="https://www.facebook.com/notes/protect-the-graph/making-connections-to-facebook-more-secure/1526085754298237/">https://www.facebook.com/notes/protect-the-graph/making-connections-to-facebook-more-secure/1526085754298237/</eref></t>
</section>

<section anchor="topics-for-possible-expansion"><name>Topics for possible expansion</name>

<ul>
<li><t>SOOC Use Cases</t>
</li>
<li><t>SOOC and Certificate Transparency</t>
</li>
<li><t>SOOC and DV Certificates</t>

<ul>
<li><t>Potential negative consequences of DV certificates for Onion Addresses</t>
</li>
</ul></li>
<li><t>SOOC and EV Certificates</t>
</li>
<li><t>SOOC and HSTS</t>
</li>
<li><t>SOOC and LetsEncrypt</t>
</li>
<li><t>SOOC to complement, not replace, EV (and perhaps DV)</t>
</li>
</ul>
</section>

</middle>

<back>
<references><name>Informative References</name>
<xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.7686.xml"/>
<xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.3548.xml"/>
</references>

</back>

</rfc>
